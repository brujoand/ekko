#! /usr/bin/env bash

function log() {
  echo "$HOST_IP: $1"
}

HOST_IP=$(ip -o -4 addr list eth0 | grep -oE "([0-9]+[.])+[0-9]+")
NETWORK_MASK=$(ip -o -4 route | sed -En 's/([0-9]+[.][0-9]\/[0-9]+) .*/\1/p')
EKKO_MULTICAST=${EKKO_MULTICAST:-'224.1.0.1'}
EKKO_POLL_RATE=${EKKO_POLL_RATE:-120}


log "Ekko botstrapped completed"

function respond_to_shouts() {
  log "EKKO: $SERVICE_NAME - $HOST_IP:$SERVICE_PORT"
  sleep 1

  read -r -d '' service_description <<EOF
  {
    "service" :{
      "name":"${SERVICE_NAME}",
      "ip":"${HOST_IP}",
      "port":"${SERVICE_PORT}"
    }
  }
EOF

  socat -d UDP4-RECVFROM:6666,ip-add-membership="${EKKO_MULTICAST}":"${HOST_IP}",fork EXEC:"echo ${service_description}"
}


function shout() {
  log "Performing shout on ${EKKO_MULTICAST} with ${EKKO_POLL_RATE}s intervals"
  echo | socat STDIO UDP4-DATAGRAM:"${EKKO_MULTICAST}":6666,range="${NETWORK_MASK}"
}

function keep_shouting() {
  hook_script=$1
  set -e
  response=
  echo ${response}
  while true; do
    services="{ services: [ $(shout | sed 's/^}$/,}/') ] }"
    "$hook_script" "${services}"
    sleep "$EKKO_POLL_RATE"
  done
  set +e
}

case $1 in
  listen)
    respond_to_shouts
    ;;
  shout)
    if [[ -z $2 ]]; then
      log "No hook script defined at arg 2, defaulting to just logging"
      keep_shouting "log"
    else
      keep_shouting "$2"
    fi
    ;;
  *)
    echo "You need to choose listen or shout"
    exit 1
    ;;
esac
